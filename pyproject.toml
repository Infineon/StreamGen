[tool.poetry]
name = "streamgen"
version = "0.0.1"
description = "Framework for simulating data streams."
authors = ["Laurenz Farthofer <laurenz@hey.com>"]
packages = [{ include = "streamgen" }]
readme = "README.md"

[tool.poe.tasks]
test = "coverage run --source=streamgen -m pytest -vv --durations=8"
convert_notebooks = "jupyter nbconvert --to markdown --config .jupyter/cfg.py"
build_documentation = "portray in_browser"
docs = [
    "convert_notebooks",
    "build_documentation"
]

[tool.poetry.dependencies]
python = "^3.10"
# Graphs and Trees
anytree = "^2.12.1" # Apache license 2.0
graphviz = "^0.20.3"
# Data handling
numpy = "^1.26.4" # custom license -> seems permissive
pandas = "^2.2.1" # BSD 3-clause license
# Visualizations
matplotlib = "^3.8.3" # custom license -> seems permissive
seaborn = "^0.13.2" # multiple licenses -> seems permissive (like MIT) if licenses are included
# Typing
beartype = "^0.17.2" # MIT license
# Logging
loguru = "^0.7.2" # MIT license
rich = "^13.7.1" # MIT license
# Continual Learning
avalanche-lib = { version = "^0.5.0", optional = true } # MIT license
continuum = { version = "^1.2.7", optional = true } # MIT license
# Example/Application Dependencies
perlin-numpy = { git = "https://github.com/pvigier/perlin-numpy", optional = true} # MIT license
polars = { version = "^0.20.13", optional = true } # MIT license

[tool.poetry.extras]
examples = ["perlin-numpy", "polars"]
cl = ["avalanche-lib", "continuum"]
all = [
    "perlin-numpy",
    "polars",
    "avalanche-lib",
    "continuum"
]

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.4"
pre-commit = "^3.6.2"
poethepoet = "^0.25.0"
pytest = "^8.0.2"
coverage = "^7.4.3"
jupyter = "^1.0.0"
ipywidgets = "^8.1.2"
nbconvert = "^7.16.2"
portray = "^1.8.0"
itables = "^2.0.0" # MIT license

[tool.ruff]
exclude = [".git", ".mypy_cache", ".ruff_cache", ".tox", ".venv", "__pypackages__", "dist", "venv"]
line-length = 140
target-version = "py311"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "RUF001",
    "ANN101",
    "D211",
    "D213",
    "EXE003",
    "TCH003",
    "TD002",
    "PD901",
    "EXE005",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.portray]
modules = ["streamgen"]
extra_dirs = ["examples"]

[tool.portray.mkdocs]
repo_name = "Laurenz Farthofer (KAI DSC)/StreamGen"
repo_url = "https://bitbucket.vih.infineon.com/users/hundgeburth/repos/streamgen/browse"
edit_uri = "https://bitbucket.vih.infineon.com/users/hundgeburth/repos/streamgen/browse"

[tool.portray.mkdocs.theme]
name = "material"
favicon = "docs/images/milky-way_animated.png"
logo = "docs/images/milky-way_animated.png"

[tool.portray.mkdocs.theme.icon]
repo = "material/bitbucket"

# Documentation Navigation
[[tool.portray.mkdocs.nav]]
"🏘️ Home" = "README.md"

[[tool.portray.mkdocs.nav]]
"🏛️ Motivation and History" = "docs/motivation_and_history.md"

[[tool.portray.mkdocs.nav]]
"🗂️ Project Structure" = "docs/project_structure.md"

[[tool.portray.mkdocs.nav]]
[[tool.portray.mkdocs.nav."🪐📓 User Guide"]]
"🎲 Sampling from Static Distributions" = "examples/time series classification/01-static-distributions.md"

[[tool.portray.mkdocs.nav."🪐📓 User Guide"]]
"🌌 Creating Data Streams" = "examples/time series classification/02-data-streams.md"

[[tool.portray.mkdocs.nav."🪐📓 User Guide"]]
"📊 Data Drift Scenarios" = "examples/time series classification/03-drift-scenarios.md"

[[tool.portray.mkdocs.nav."🪐📓 User Guide"]]
"🌐 Wafer Map Generation" = "examples/wafer_map_generation.md"

[[tool.portray.mkdocs.nav]]
[[tool.portray.mkdocs.nav."👨‍💻 Developers"]]
"⚒️ Guide" = "docs/developer_guide.md"

[[tool.portray.mkdocs.nav."👨‍💻 Developers"]]
"⚗️ Testing" =  "docs/testing.md"

[[tool.portray.mkdocs.nav]]
"🕰️ Changelog" = "CHANGELOG.md"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
